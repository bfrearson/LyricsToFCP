<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>492</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run JavaScript.action</string>
				<key>ActionName</key>
				<string>Run JavaScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>function run(input, parameters) {

//Include OSA library
var app = Application.currentApplication()
app.includeStandardAdditions = true
var userPath = app.pathTo ('home folder')

var lyricsInput = input.toString()

//Applescript/JXA boilerplate function
function writeTextToFile(text, file, overwriteExistingContent) {
    try {

        // Convert the file to a string
        var fileString = file.toString()

        // Open the file for writing
        var openedFile = app.openForAccess(Path(fileString), { writePermission: true })

        // Clear the file if content should be overwritten
        if (overwriteExistingContent) {
            app.setEof(openedFile, { to: 0 })
        }

        // Write the new content to the file
        app.write(text, { to: openedFile, startingAt: app.getEof(openedFile) })

        // Close the file
        app.closeAccess(openedFile)

        // Return a boolean indicating that writing was successful
        return true
    }
    catch(error) {

        try {
            // Close the file
            app.closeAccess(file)
        }
        catch(error) {
            // Report the error is closing failed
            console.log(`Couldn't close file: ${error}`)
        }

        // Return a boolean indicating that writing was successful
        return false
    }
}

//Generate an XML text block

var textImport = lyricsInput.split("\n\n")
var songTitle = textImport[0]
var textArray = []

//Import FCPXML template
var xmlString = userPath.toString() + '/Library/Application Support/LyricsToFCP/FCPLyricsBlank.fcpxml'
var xmlBlank = app.read(Path(xmlString))

var titlePlaceholder = "&lt;title name=\"blankTitle\" ref=\"r2\" duration=\"5s\"&gt;\n&lt;text&gt;\nblankTitle\n&lt;/text&gt;\n&lt;/title&gt;"

var projectTempTitle = "&lt;project name=\"Only a Test Lyrics Project Import\"&gt;"
var projectNewTitle = projectTempTitle.replace("Only a Test Lyrics Project Import",songTitle)

xmlBlank = xmlBlank.replace(projectTempTitle, projectNewTitle)

for (var i=1; i&lt; textImport.length; i++){
var sectionText = textImport[i].split("\n")
  for (var j=0; j&lt;sectionText.length; j=j+2){
    var textPair = sectionText[j]+ (sectionText[j+1] ? ("\n" + sectionText[j+1]):"")
    textArray.push(textPair)
  }
}

function wrapTitleTags(input) {
var titleTags = titlePlaceholder.split("blankTitle").join(input)
return titleTags
}

var replacementString = ""
for (let element of textArray) {
replacementString = replacementString + "\n"+ wrapTitleTags(element)
};

var generateXML = xmlBlank.replace(titlePlaceholder, replacementString)

//add end crossfade
var transitionOut = "&lt;transition name=\"Cross Dissolve\" \"offset=100s\" duration=\"1500/3000s\"&gt;\n    &lt;filter-video ref=\"r3\" name=\"Cross Dissolve\"&gt;\n        &lt;param name=\"Look\" key=\"1\" value=\"11 (Video)\"/&gt;\n        &lt;param name=\"Amount\" key=\"2\" value=\"50\"/&gt;\n        &lt;param name=\"Ease\" key=\"50\" value=\"2 (In &amp;amp; Out)\"/&gt;\n        &lt;param name=\"Ease Amount\" key=\"51\" value=\"0\"/&gt;\n    &lt;/filter-video&gt;\n&lt;/transition&gt;"

var fadeOutPlaceholder = "&lt;!-- transitionOut --&gt;"

var titleCount = (textArray.length * 5)
var songOffset = "offset=\"" + titleCount + "s\""
var offsetPlaceholder = "\"offset=100s\""

transitionOut = transitionOut.replace(offsetPlaceholder, songOffset)

generateXML = generateXML.replace(fadeOutPlaceholder, transitionOut)
generateXML = generateXML.replace(/[\u2018\u2019]/g,"'")
generateXML = generateXML.replace(/[\u201C\u201D]/g,"\"")
generateXML = generateXML.replace(/[\u2014]/g,"\-")

//Create filepath

var fileDir = userPath.toString() + '/Library/Application Support/LyricsToFCP/XML/'

var fileName = fileDir + songTitle + ".fcpxml";

//save textblock to file
writeTextToFile (generateXML, fileName, true)

//send to FCPX
var FCP = Application('Final Cut Pro')
FCP.activate()
FCP.open(fileName)

}
</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunJavaScript</string>
				<key>CFBundleVersion</key>
				<string>1.0</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunJavaScriptAction</string>
				<key>InputUUID</key>
				<string>FCBB6521-26D5-4FA9-B148-32087A54AEEB</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
					<string>JavaScript</string>
				</array>
				<key>OutputUUID</key>
				<string>8F9B6150-0AB2-43CC-B150-30897F685D54</string>
				<key>UUID</key>
				<string>CB6A29FB-1155-40BD-B9CF-416BE4072E23</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>function run(input, parameters) {
	
	// Your script goes here

	return input;
}</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>299.500000:767.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run JavaScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleIDsByPath</key>
		<dict/>
		<key>applicationPaths</key>
		<array/>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.text</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>presentationMode</key>
		<integer>11</integer>
		<key>processesInput</key>
		<integer>0</integer>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.text</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>systemImageName</key>
		<string>NSActionTemplate</string>
		<key>useAutomaticInputType</key>
		<integer>0</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
