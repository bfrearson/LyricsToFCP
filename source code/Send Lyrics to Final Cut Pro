//Written to be run as an Automtor workflow in MacOS.

function run(input, parameters) {
//Include OSA library
var app = Application.currentApplication()
app.includeStandardAdditions = true
var userPath = app.pathTo ('home folder')

var lyricsInput = input.toString()


//Apple boilerplate function
function writeTextToFile(text, file, overwriteExistingContent) {
    try {
 
        // Convert the file to a string
        var fileString = file.toString()
 
        // Open the file for writing
        var openedFile = app.openForAccess(Path(fileString), { writePermission: true })
 
        // Clear the file if content should be overwritten
        if (overwriteExistingContent) {
            app.setEof(openedFile, { to: 0 })
        }
 
        // Write the new content to the file
        app.write(text, { to: openedFile, startingAt: app.getEof(openedFile) })
 
        // Close the file
        app.closeAccess(openedFile)
 
        // Return a boolean indicating that writing was successful
        return true
    }
    catch(error) {
 
        try {
            // Close the file
            app.closeAccess(file)
        }
        catch(error) {
            // Report the error is closing failed
            console.log(`Couldn't close file: ${error}`)
        }
 
        // Return a boolean indicating that writing was successful
        return false
    }
}

//Generate an XML text block

var textImport = lyricsInput.split("\n\n")
var songTitle = textImport[0]
var textArray = []

var xmlString = userPath.toString() + '/Library/Application Support/LyricsToFCP/FCPLyricsBlank.fcpxml'

var xmlBlank = app.read(Path(xmlString))

var titlePlaceholder = "<title name=\"blankTitle\" ref=\"r2\" duration=\"5s\">\n<text>\nblankTitle\n</text>\n</title>"

var projectTempTitle = "<project name=\"Only a Test Lyrics Project Import\">"
var projectNewTitle = projectTempTitle.replace("Only a Test Lyrics Project Import",songTitle)
xmlBlank = xmlBlank.replace(projectTempTitle, projectNewTitle)

for (var i=1; i< textImport.length; i++){
var sectionText = textImport[i].split("\n")
  for (var j=0; j<sectionText.length; j=j+2){
    var textPair = sectionText[j]+ (sectionText[j+1] ? ("\n" + sectionText[j+1]):"")
    textArray.push(textPair)
  }
}

function wrapTitleTags(input) {
var titleTags = titlePlaceholder.split("blankTitle").join(input)
return titleTags
}

var replacementString = ""
for (let element of textArray) {
replacementString = replacementString + "\n"+ wrapTitleTags(element)
};

var generateXML = xmlBlank.replace(titlePlaceholder, replacementString)


//add end crossfade
var transitionOut = "<transition name=\"Cross Dissolve\" \"offset=100s\" duration=\"1500/3000s\">\n    <filter-video ref=\"r3\" name=\"Cross Dissolve\">\n        <param name=\"Look\" key=\"1\" value=\"11 (Video)\"/>\n        <param name=\"Amount\" key=\"2\" value=\"50\"/>\n        <param name=\"Ease\" key=\"50\" value=\"2 (In &amp; Out)\"/>\n        <param name=\"Ease Amount\" key=\"51\" value=\"0\"/>\n    </filter-video>\n</transition>"

var fadeOutPlaceholder = "<!-- transitionOut -->"

var titleCount = (textArray.length * 5)
var songOffset = "offset=\"" + titleCount + "s\""
var offsetPlaceholder = "\"offset=100s\""


transitionOut = transitionOut.replace(offsetPlaceholder, songOffset)


generateXML = generateXML.replace(fadeOutPlaceholder, transitionOut)

//Create filepath

var fileDir = userPath.toString() + '/Library/Application Support/LyricsToFCP/XML/'

var fileName = fileDir + songTitle + ".fcpxml";

//save textblock to file
writeTextToFile (generateXML, fileName, true)

//send to FCPX
var FCP = Application('Final Cut Pro')
FCP.activate()
FCP.open(fileName)

}
